from aiogram import Router, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
import aiohttp

router = Router()

class BookingForm(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_description = State()
    waiting_for_address = State()
    waiting_for_quantity = State()
    waiting_for_confirmation = State()
    waiting_for_payment_method = State()

async def send_order_to_app(user_id, item_name, quantity):
    async with aiohttp.ClientSession() as session:
        payload = {
            "user_id": user_id,
            "item_name": item_name,
            "quantity": quantity
        }
        try:
            async with session.post("http://localhost:5000/api/orders", json=payload) as resp:
                data = await resp.json()
                return {
                    "success": resp.status == 200,
                    "data": data,
                    "status": resp.status
                }
        except Exception as e:
            return {
                "success": False,
                "error": str(e)
            }

# --- START ---
@router.message(F.text == "üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
async def booking_start(message: Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(BookingForm.waiting_for_name)

# --- NAME ---
@router.message(BookingForm.waiting_for_name)
async def booking_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–ø—Ä–∏–º–µ—Ä: +992123456789):")
    await state.set_state(BookingForm.waiting_for_phone)

# --- PHONE ---
@router.message(BookingForm.waiting_for_phone)
async def booking_phone(message: Message, state: FSMContext):
    phone = message.text.strip()
    if not phone.startswith("+") or not phone[1:].isdigit() or len(phone) < 10:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +992123456789")
        return
    await state.update_data(phone=phone)
    await message.answer("–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞–º –Ω—É–∂–Ω–æ:")
    await state.set_state(BookingForm.waiting_for_description)

# --- DESCRIPTION ---
@router.message(BookingForm.waiting_for_description)
async def booking_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await state.set_state(BookingForm.waiting_for_address)

# --- ADDRESS ---
@router.message(BookingForm.waiting_for_address)
async def booking_address(message: Message, state: FSMContext):
    await state.update_data(address=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(BookingForm.waiting_for_quantity)

# --- QUANTITY ---
@router.message(BookingForm.waiting_for_quantity)
async def booking_quantity(message: Message, state: FSMContext):
    quantity = message.text.strip()
    if not quantity.isdigit() or int(quantity) <= 0:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0).")
        return
    await state.update_data(quantity=quantity)

    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –î–∞", callback_data="confirm_yes")
    kb.button(text="‚ùå –ù–µ—Ç", callback_data="confirm_no")
    await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:", reply_markup=kb.as_markup())
    await state.set_state(BookingForm.waiting_for_confirmation)

# --- CONFIRMATION ---
@router.callback_query(F.data.in_({"confirm_yes", "confirm_no"}))
async def booking_confirmation(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    if callback.data == "confirm_no":
        await state.clear()
        await callback.message.answer("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.")
        return

    kb = InlineKeyboardBuilder()
    kb.button(text="üíµ –ù–∞–ª–∏—á–Ω—ã–µ", callback_data="pay_cash")
    kb.button(text="üí≥ –ö–∞—Ä—Ç–∞", callback_data="pay_card")
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=kb.as_markup())
    await state.set_state(BookingForm.waiting_for_payment_method)

# --- PAYMENT ---
@router.callback_query(F.data.in_({"pay_cash", "pay_card"}))
async def booking_payment(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    payment = "–ù–∞–ª–∏—á–Ω—ã–µ" if callback.data == "pay_cash" else "–ö–∞—Ä—Ç–∞"

    user_data = await state.get_data()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –Ω–∞ –≤–Ω–µ—à–Ω–∏–π API
    response = await send_order_to_app(
        user_id=callback.from_user.id,
        item_name=user_data.get("description", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"),
        quantity=int(user_data.get("quantity", 1))
    )

    if response.get("success", False):
        await callback.message.answer(
            "‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n"
            f"üë§ –ò–º—è: {user_data['name']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {user_data['description']}\n"
            f"üìç –ê–¥—Ä–µ—Å: {user_data['address']}\n"
            f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {user_data['quantity']}\n"
            f"üí∞ –û–ø–ª–∞—Ç–∞: {payment}"
        )
    else:
        debug_info = ""
        if "error" in response:
            debug_info = f"\n\nü™õ –û—à–∏–±–∫–∞: {response['error']}"
        elif "status" in response:
            debug_info = f"\n\nü™õ –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response['status']}, –¥–∞–Ω–Ω—ã–µ: {response.get('data')}"
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." + debug_info)

    await state.clear()
