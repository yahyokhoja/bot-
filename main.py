import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.bot import DefaultBotProperties
from aiohttp import web

from config import (
    BOT_TOKEN,
    USE_WEBHOOK,
    WEBHOOK_URL,
    WEBHOOK_PATH,
    WEBAPP_HOST,
    WEBAPP_PORT
)

from handlers import booking, start, faq, menu, broadcast

import logging

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    filename='log.txt',
    filemode='a',
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)



async def on_startup(bot: Bot):
    if USE_WEBHOOK:
        await bot.set_webhook(WEBHOOK_URL)
        print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")


async def on_shutdown(bot: Bot):
    if USE_WEBHOOK:
        await bot.delete_webhook()
        print("üîª Webhook —É–¥–∞–ª—ë–Ω")
    await bot.session.close()
    print("üîª –°–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞")


async def handle_webhook(request: web.Request):
    app = request.app
    dispatcher = app['dispatcher']
    data = await request.json()
    update = types.Update(**data)
    await dispatcher.feed_update(bot=app['bot'], update=update)
    return web.Response(text='OK')


async def main():
    bot = Bot(
        token=BOT_TOKEN,
        default=DefaultBotProperties(parse_mode="HTML")
    )
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
    dp.include_router(start.router)
    dp.include_router(booking.router)
    dp.include_router(menu.router)
    dp.include_router(faq.router)
    dp.include_router(broadcast.router)

    if USE_WEBHOOK:
        # Webhook-—Ä–µ–∂–∏–º (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞ –¥–µ–ø–ª–æ–µ)
        app = web.Application()
        app['bot'] = bot
        app['dispatcher'] = dp

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º webhook –ø—É—Ç—å
        app.router.add_post(WEBHOOK_PATH, handle_webhook)

        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, WEBAPP_HOST, WEBAPP_PORT)
        await site.start()

        await on_startup(bot)
        print(f"üöÄ Webhook bot –∑–∞–ø—É—â–µ–Ω –Ω–∞ {WEBHOOK_URL}")

        try:
            while True:
                await asyncio.sleep(3600)
        finally:
            await on_shutdown(bot)

    else:
        # Polling-—Ä–µ–∂–∏–º (–ª–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)
        print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling (–ª–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)")
        await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
